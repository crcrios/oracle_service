# Build and push image

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      appName:
        description: 'app name for image tag name' 
        required: true


name: Elixir CI

jobs:

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.13' # Define the elixir version [required]
          otp-version: '25' # Define the OTP version [required]
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        run: mix deps.get
      - name: Run tests
        run: mix test
        
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: test
          ECR_REPOSITORY: oracle_service
          IMAGE_TAG: ${{ github.event.inputs.appName }}_v${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

#      - name: Configure AWS credentials
#        id: creds
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
#          aws-region: us-east-1
      
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ github.event.inputs.ecrRepository }}
#          IMAGE_TAG: ${{ github.event.inputs.appName }}_v${{ github.run_number }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



