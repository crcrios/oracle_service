# Build and push image

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      appName:
        description: 'app name for image tag name' 
        required: true
      ecrRepository:
        description: 'ECR repository name where image will be deployed to'     
        required: true
      AWS_ACCESS_KEY_ID:
        description: 'AWS_ACCESS_KEY_ID'     
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS_SECRET_ACCESS_KEY'     
        required: true
      AWS_SESSION_TOKEN:
        description: 'AWS_SESSION_TOKEN'     
        required: true

name: Elixir CI

jobs:

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
    
      - name: Credo 
        run: |
          mix credo --strict --verbose --format json 2>&1 | tee credo_result.json

      - uses: gahorstmann/credo-sonar-convert@main
        with:
          input-file: 'credo_result.json'
          output-file: 'credo_sonarqube.json'

      - name: Credo 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: http://ec2-54-242-150-198.compute-1.amazonaws.com:9000
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=credo_sonarqube.json
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.13' # Define the elixir version [required]
          otp-version: '25' # Define the OTP version [required]
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        run: mix deps.get
      - name: Run tests
        run: mix test

#      - name: Configure AWS credentials
#        id: creds
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
#          aws-region: us-east-1
      
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1

#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ github.event.inputs.ecrRepository }}
#          IMAGE_TAG: ${{ github.event.inputs.appName }}_v${{ github.run_number }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



